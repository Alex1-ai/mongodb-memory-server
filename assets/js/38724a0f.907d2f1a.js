(self.webpackChunkmongodb_memory_server_website=self.webpackChunkmongodb_memory_server_website||[]).push([[179],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return g}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=l(t),g=r,d=u["".concat(c,".").concat(g)]||u[g]||p[g]||a;return t?o.createElement(d,i(i({ref:n},m),{},{components:t})):o.createElement(d,i({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2284:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return m},default:function(){return u}});var o=t(2122),r=t(9756),a=(t(7294),t(3905)),i=["components"],s={id:"integration-examples",title:"Integration Examples"},c=void 0,l={unversionedId:"guides/integration-examples",id:"guides/integration-examples",isDocsHomePage:!1,title:"Integration Examples",description:"This Guide will show how mongodb-memory-server can be used with different frameworks",source:"@site/../docs/guides/integration-examples.md",sourceDirName:"guides",slug:"/guides/integration-examples",permalink:"/mongodb-memory-server/docs/guides/integration-examples",editUrl:"https://github.com/nodkz/mongodb-memory-server/edit/master/docs/../docs/guides/integration-examples.md",version:"current",frontMatter:{id:"integration-examples",title:"Integration Examples"},sidebar:"guides",previous:{title:"Known Issues",permalink:"/mongodb-memory-server/docs/guides/known-issues"},next:{title:"Migrate to version 7.0.0",permalink:"/mongodb-memory-server/docs/guides/migrate7"}},m=[{value:"jest",id:"jest",children:[]},{value:"mocha / chai",id:"mocha--chai",children:[]}],p={toc:m};function u(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This Guide will show how ",(0,a.kt)("inlineCode",{parentName:"p"},"mongodb-memory-server")," can be used with different frameworks"),(0,a.kt)("h2",{id:"jest"},"jest"),(0,a.kt)("p",null,"For useage with ",(0,a.kt)("inlineCode",{parentName:"p"},"jest")," it is recommended to use the ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/configuration#globalsetup-string"},(0,a.kt)("inlineCode",{parentName:"a"},"globalSetup"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/configuration#globalteardown-string"},(0,a.kt)("inlineCode",{parentName:"a"},"globalTeardown"))," options"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"jest.config.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'{\n  "preset": "ts-jest",\n  "globalSetup": "<rootDir>/test/globalSetup.ts",\n  "globalTeardown": "<rootDir>/test/globalTeardown.ts",\n  "setupFilesAfterEnv": [\n    "<rootDir>/test/setupFile.ts"\n  ]\n}\n\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"globalSetup.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MongoMemoryServer } from 'mongodb-memory-server';\nimport * as mongoose from 'mongoose';\nimport { config } from './utils/config';\n\nexport = async function globalSetup() {\n  if (config.Memory) { // Config to decided if an mongodb-memory-server instance should be used\n    // it's needed in global space, because we don't want to create a new instance every test-suite\n    const instance = await MongoMemoryServer.create();\n    const uri = instance.getUri();\n    (global as any).__MONGOINSTANCE = instance;\n    process.env.MONGO_URI = uri.slice(0, uri.lastIndexOf('/'));\n  } else {\n    process.env.MONGO_URI = `mongodb://${config.IP}:${config.Port}`;\n  }\n\n  // The following is to make sure the database is clean before an test starts\n  await mongoose.connect(`${process.env.MONGO_URI}/${config.DataBase}`, { useNewUrlParser: true, useUnifiedTopology: true });\n  await mongoose.connection.db.dropDatabase();\n  await mongoose.disconnect();\n};\n\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"globalTeardown.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { MongoMemoryServer } from 'mongodb-memory-server';\nimport { config } from './utils/config';\n\nexport = async function globalTeardown() {\n  if (config.Memory) { // Config to decided if an mongodb-memory-server instance should be used\n    const instance: MongoMemoryServer = (global as any).__MONGOINSTANCE;\n    await instance.stop();\n  }\n};\n")),(0,a.kt)("p",null,"and an ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/en/configuration#setupfilesafterenv-array"},(0,a.kt)("inlineCode",{parentName:"a"},"setupFilesAfterEnv"))," can be used to connect something like ",(0,a.kt)("inlineCode",{parentName:"p"},"mongoose")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"mongodb")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setupFile.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { connect, disconnect } from './utils/connect';\n\nbeforeAll(async () => {\n  await connect();\n});\n\nafterAll(async () => {\n  await disconnect();\n});\n")),(0,a.kt)("h2",{id:"mocha--chai"},"mocha / chai"),(0,a.kt)("p",null,"Start Mocha with ",(0,a.kt)("inlineCode",{parentName:"p"},"--timeout 60000")," cause first download of MongoDB binaries may take a time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import mongoose from 'mongoose';\nimport { MongoMemoryServer } from 'mongodb-memory-server';\n\nlet mongoServer;\nconst opts = { useMongoClient: true }; // remove this option if you use mongoose 5 and above\n\nbefore(async () => {\n  mongoServer = new MongoMemoryServer();\n  const mongoUri = await mongoServer.getUri();\n  await mongoose.connect(mongoUri, opts);\n});\n\nafter(async () => {\n  await mongoose.disconnect();\n  await mongoServer.stop();\n});\n\ndescribe('...', () => {\n  it('...', async () => {\n    const User = mongoose.model('User', new mongoose.Schema({ name: String }));\n    const cnt = await User.count();\n    expect(cnt).to.equal(0);\n  });\n});\n")))}u.isMDXComponent=!0}}]);